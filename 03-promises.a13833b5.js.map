{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,SAClCC,MAAOF,SAASC,cAAc,6BAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAuBjC,SAASI,EAAcC,EAAUJ,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,qBAAoCG,OAAfR,EAAS,QAAYQ,OAANZ,EAAM,OAElDU,EAAO,oBAAmCE,OAAfR,EAAS,QAAYQ,OAANZ,EAAM,M,GAEjDA,E,IA7BPJ,EAAKC,UAAUgB,iBAAiB,UAEhC,SAA2BC,GACzBA,EAAMC,iBAMN,IAJA,IAAIC,EAAaC,OAAOrB,EAAKI,MAAMkB,OAC/BC,EAAYF,OAAOrB,EAAKK,KAAKiB,OAC7BE,EAAiBH,OAAOrB,EAAKM,OAAOgB,OAE/BG,EAAI,EAAGA,GAAKD,EAAgBC,GAAK,EAExClB,EAAckB,EAAGL,GACdM,MAAK,SAAAJ,G,OAASxB,EAAA6B,OAAOC,QAAQN,E,IAC7BO,OAAM,SAAAC,G,OAAShC,EAAA6B,OAAOI,QAAQD,E,IAEjCV,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix\";\n\nconst refs = {\n  submitBtn: document.querySelector('.form'),\n  delay: document.querySelector('.form input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.submitBtn.addEventListener('submit', handledFormSubmit);\n\nfunction handledFormSubmit(event) {\n  event.preventDefault();\n  \n  let firstDelay = Number(refs.delay.value);\n  let stepDelay = Number(refs.step.value);\n  let amountPromises = Number(refs.amount.value);\n  \n  for (let i = 1; i <= amountPromises; i += 1) {\n    \n    createPromise(i, firstDelay)\n      .then(value => Notify.success(value))\n      .catch(error => Notify.failure(error));\n    \n    firstDelay += stepDelay;\n    \n  };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n  return promise;\n};\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","submitBtn","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","concat","addEventListener","event","preventDefault","firstDelay","Number","value","stepDelay","amountPromises","i","then","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.a13833b5.js.map"}